{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Anthony/dyad-apps/TK%20Messaging/src/app/api/admin/customers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { writeFile, readFile } from \"fs/promises\";\r\nimport { join } from \"path\";\r\n\r\nconst CUSTOMERS_FILE = join(process.cwd(), \"data\", \"customers.json\");\r\n\r\nexport async function GET() {\r\n  try {\r\n    const data = await readFile(CUSTOMERS_FILE, \"utf8\");\r\n    const customers = JSON.parse(data);\r\n    return NextResponse.json(customers);\r\n  } catch (error) {\r\n    // Return empty array if file doesn't exist\r\n    return NextResponse.json([]);\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const newCustomer = await request.json();\r\n    \r\n    // Validate required fields\r\n    if (!newCustomer.name || !newCustomer.phone || !newCustomer.username || !newCustomer.password) {\r\n      return NextResponse.json(\r\n        { error: \"Name, phone number, username, and password are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Add ID and timestamp\r\n    const customer = {\r\n      id: `cust_${Date.now()}`,\r\n      name: newCustomer.name,\r\n      email: newCustomer.email || \"\",\r\n      phone: newCustomer.phone,\r\n      username: newCustomer.username,\r\n      password: newCustomer.password, // In production, this should be hashed\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    // Read existing customers\r\n    let customers = [];\r\n    try {\r\n      const data = await readFile(CUSTOMERS_FILE, \"utf8\");\r\n      customers = JSON.parse(data);\r\n    } catch (error) {\r\n      // File doesn't exist, start with empty array\r\n    }\r\n\r\n    // Add new customer\r\n    customers.push(customer);\r\n\r\n    // Save to file\r\n    await writeFile(CUSTOMERS_FILE, JSON.stringify(customers, null, 2));\r\n    \r\n    return NextResponse.json({ success: true, customer });\r\n  } catch (error) {\r\n    console.error(\"Error saving customer:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to save customer\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const customerId = searchParams.get(\"id\");\r\n\r\n    if (!customerId) {\r\n      return NextResponse.json(\r\n        { error: \"Customer ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Read existing customers\r\n    const data = await readFile(CUSTOMERS_FILE, \"utf8\");\r\n    const customers = JSON.parse(data);\r\n\r\n    // Remove customer\r\n    const filteredCustomers = customers.filter((c: any) => c.id !== customerId);\r\n\r\n    // Save to file\r\n    await writeFile(CUSTOMERS_FILE, JSON.stringify(filteredCustomers, null, 2));\r\n    \r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error(\"Error deleting customer:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to delete customer\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,iBAAiB,IAAA,yGAAI,EAAC,QAAQ,GAAG,IAAI,QAAQ;AAE5C,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,IAAA,iIAAQ,EAAC,gBAAgB;QAC5C,MAAM,YAAY,KAAK,KAAK,CAAC;QAC7B,OAAO,+QAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,2CAA2C;QAC3C,OAAO,+QAAY,CAAC,IAAI,CAAC,EAAE;IAC7B;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,cAAc,MAAM,QAAQ,IAAI;QAEtC,2BAA2B;QAC3B,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,QAAQ,IAAI,CAAC,YAAY,QAAQ,EAAE;YAC7F,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0D,GACnE;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,WAAW;YACf,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;YACxB,MAAM,YAAY,IAAI;YACtB,OAAO,YAAY,KAAK,IAAI;YAC5B,OAAO,YAAY,KAAK;YACxB,UAAU,YAAY,QAAQ;YAC9B,UAAU,YAAY,QAAQ;YAC9B,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,0BAA0B;QAC1B,IAAI,YAAY,EAAE;QAClB,IAAI;YACF,MAAM,OAAO,MAAM,IAAA,iIAAQ,EAAC,gBAAgB;YAC5C,YAAY,KAAK,KAAK,CAAC;QACzB,EAAE,OAAO,OAAO;QACd,6CAA6C;QAC/C;QAEA,mBAAmB;QACnB,UAAU,IAAI,CAAC;QAEf,eAAe;QACf,MAAM,IAAA,kIAAS,EAAC,gBAAgB,KAAK,SAAS,CAAC,WAAW,MAAM;QAEhE,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAS;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,+QAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,IAAI,CAAC,YAAY;YACf,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,OAAO,MAAM,IAAA,iIAAQ,EAAC,gBAAgB;QAC5C,MAAM,YAAY,KAAK,KAAK,CAAC;QAE7B,kBAAkB;QAClB,MAAM,oBAAoB,UAAU,MAAM,CAAC,CAAC,IAAW,EAAE,EAAE,KAAK;QAEhE,eAAe;QACf,MAAM,IAAA,kIAAS,EAAC,gBAAgB,KAAK,SAAS,CAAC,mBAAmB,MAAM;QAExE,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,+QAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}